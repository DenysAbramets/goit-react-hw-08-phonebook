{"version":3,"file":"static/js/571.d1646f24.chunk.js","mappings":"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","sources":["components/Contacts/Filter/Filter.styled.jsx","components/Contacts/Filter/Filter.js","../node_modules/nanoid/index.browser.js","components/Contacts/Form/Form.styled.jsx","components/Contacts/Form/Form.js","components/Contacts/ListContacts/List.Contacts.styled.jsx","components/Contacts/ListContacts/ListContacts.js","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: block;\n  width: 300px;\n`;\nexport const Input = styled.input`\n  margin-top: 10px;\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Input, Label } from './Filter.styled';\nimport { filteredContacts } from 'redux/Contacts/FilterSlice';\n\nexport default function Filter() {\n  const filter = useSelector(state => state.filter.filter);\n  const dispatch = useDispatch();\n  const handleFilter = e => {\n    dispatch(filteredContacts(e.currentTarget.value));\n  };\n  return (\n    <Label>\n      Find contacts by me\n      <Input type=\"text\" onChange={handleFilter} value={filter} />\n    </Label>\n  );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  width: 300px;\n  height: 150px;\n  border: 5px solid #3c9da4;\n`;\nexport const Label = styled.label`\n  width: 160px;\n  display: inline-block;\n  font-size: 16px;\n  font-weight: bold;\n  margin-left: 15px;\n`;\nexport const Input = styled.input``;\nexport const Button = styled.button`\n  display: flex;\n  margin-top: 15px;\n  margin-left: 15px;\n  padding: 5px;\n  background: #53a695;\n  border-radius: 5px;\n`;\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Button, Form, Input, Label } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from '../../../redux/Contacts/operations';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    if (name === 'name') {\n      setName(value);\n    }\n    if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.some(contact => contact.name === name)) {\n      return alert(`${contacts.name} is already in contacts`);\n    } else {\n      dispatch(addContacts({ name, number }));\n    }\n\n    setName('');\n    setNumber('');\n  };\n\n  const idName = nanoid();\n  const idNumber = nanoid();\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor={idName}>Name</Label>\n      <Input\n        id={idName}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleChange}\n      />\n\n      <Label htmlFor={idNumber}>Number</Label>\n      <Input\n        id={idNumber}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={handleChange}\n      />\n\n      <Button type=\"submit\" disabled={!name || !number}>\n        Add contact\n      </Button>\n    </Form>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const ListItem = styled.li`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  justify-content: space-between;\n  height: 50px;\n  align-items: center;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Description = styled.p`\n  color: #000;\n  text-decoration: none;\n  font-size: 1.2rem;\n`;\nexport const Button = styled.button`\n  height: 35px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Description, List, ListItem } from './List.Contacts.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContacts } from '../../../redux/Contacts/operations';\nimport { getConctacs, getFilter, getLoading } from 'redux/Selectors';\n\nconst ListContacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getConctacs);\n  const filter = useSelector(getFilter);\n  const isLoading = useSelector(getLoading);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <List>\n      {isLoading && <b>Loading contacts...</b>}\n      {filteredContacts.map(({ id, name, number }) => (\n        <ListItem key={id}>\n          <Description>\n            {name}: {number}\n          </Description>\n          <Button data-id={id} onClick={() => dispatch(deleteContacts(id))}>\n            Delete\n          </Button>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nListContacts.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ListContacts;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport Filter from 'components/Contacts/Filter/Filter';\nimport Form from 'components/Contacts/Form/Form';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../redux/Contacts/operations';\n\nimport ListContacts from 'components/Contacts/ListContacts/ListContacts';\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Your contacts</title>\n        </Helmet>\n        <Form />\n        <Filter />\n        <ListContacts />\n      </HelmetProvider>\n    </>\n  );\n}\nexport default Contacts;\n"],"names":["Label","styled","Input","Filter","filter","useSelector","state","dispatch","useDispatch","type","onChange","e","filteredContacts","currentTarget","value","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Form","Button","ContactForm","useState","name","setName","number","setNumber","contacts","handleChange","target","idName","idNumber","onSubmit","preventDefault","some","contact","alert","addContacts","htmlFor","pattern","title","required","disabled","List","ListItem","Description","getConctacs","getFilter","isLoading","getLoading","toLowerCase","includes","map","onClick","deleteContacts","useEffect","fetchContacts"],"sourceRoot":""}